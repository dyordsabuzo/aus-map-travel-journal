{"ast":null,"code":"var _jsxFileName = \"/Users/gabuzo/workspace/git/ai/build/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport MapView from \"./components/MapView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialPins = [];\n\n// Replace with your OpenRouteService API key\nconst ORS_API_KEY = \"YOUR_OPENROUTESERVICE_API_KEY\";\nasync function fetchORSRoute(start, end) {\n  const url = \"https://api.openrouteservice.org/v2/directions/driving-car/geojson\";\n  const body = {\n    coordinates: [[start[1], start[0]],\n    // [lng, lat]\n    [end[1], end[0]]]\n  };\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: ORS_API_KEY,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  if (!res.ok) return [start, end];\n  const data = await res.json();\n  if (data && data.features && data.features[0] && data.features[0].geometry && data.features[0].geometry.coordinates) {\n    // ORS returns [lng, lat], convert to [lat, lng]\n    return data.features[0].geometry.coordinates.map(([lng, lat]) => [lat, lng]);\n  }\n  return [start, end];\n}\nfunction App() {\n  _s();\n  const [pins, setPins] = useState(initialPins);\n  const [startIdx, setStartIdx] = useState(null);\n  const [endIdx, setEndIdx] = useState(null);\n\n  // Handle map click to add a new pin\n  const handleMapClick = e => {\n    if (!e.latlng) return;\n    const coords = [e.latlng.lat, e.latlng.lng];\n    const placeName = prompt(\"Enter the name of this place:\");\n    if (!placeName) return;\n    setPins(prev => [...prev, {\n      coords,\n      placeName,\n      media: [],\n      travels: []\n    }]);\n  };\n\n  // Handle media upload for a pin\n  const handleMediaUpload = (pinIdx, files) => {\n    const fileObjs = Array.from(files).map(file => ({\n      url: URL.createObjectURL(file),\n      type: file.type,\n      name: file.name\n    }));\n    setPins(prev => prev.map((pin, idx) => idx === pinIdx ? {\n      ...pin,\n      media: [...pin.media, ...fileObjs]\n    } : pin));\n  };\n\n  // Set a pin as start point\n  const handleSetStart = idx => {\n    setStartIdx(idx);\n    // If end is same as start, reset end\n    if (endIdx === idx) setEndIdx(null);\n  };\n\n  // Set a pin as end point\n  const handleSetEnd = async idx => {\n    setEndIdx(idx);\n    // If start is same as end, reset start\n    if (startIdx === idx) setStartIdx(null);\n\n    // If a start point is selected, add this end point to the travels of the start pin\n    if (startIdx !== null && startIdx !== idx) {\n      // Fetch the route from OpenRouteService\n      const route = await fetchORSRoute(pins[startIdx].coords, pins[idx].coords);\n      setPins(prevPins => prevPins.map((pin, i) => i === startIdx ? {\n        ...pin,\n        travels: pin.travels.some(t => t.to === idx) ? pin.travels : [...pin.travels, {\n          to: idx,\n          route\n        }]\n      } : pin));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-screen w-screen bg-gray-100\",\n    children: /*#__PURE__*/_jsxDEV(MapView, {\n      pins: pins,\n      onMapClick: handleMapClick,\n      onMediaUpload: handleMediaUpload,\n      startIdx: startIdx,\n      endIdx: endIdx,\n      onSetStart: handleSetStart,\n      onSetEnd: handleSetEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d94ALovmx6G/4BpgAqy1MbZTZqs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapView","jsxDEV","_jsxDEV","initialPins","ORS_API_KEY","fetchORSRoute","start","end","url","body","coordinates","res","fetch","method","headers","Authorization","JSON","stringify","ok","data","json","features","geometry","map","lng","lat","App","_s","pins","setPins","startIdx","setStartIdx","endIdx","setEndIdx","handleMapClick","e","latlng","coords","placeName","prompt","prev","media","travels","handleMediaUpload","pinIdx","files","fileObjs","Array","from","file","URL","createObjectURL","type","name","pin","idx","handleSetStart","handleSetEnd","route","prevPins","i","some","t","to","className","children","onMapClick","onMediaUpload","onSetStart","onSetEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gabuzo/workspace/git/ai/build/src/App.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport MapView from \"./components/MapView\";\nimport { Pin, Travel } from \"./types\";\n\nconst initialPins: Pin[] = [];\n\n// Replace with your OpenRouteService API key\nconst ORS_API_KEY = \"YOUR_OPENROUTESERVICE_API_KEY\";\n\nasync function fetchORSRoute(\n  start: [number, number],\n  end: [number, number],\n): Promise<[number, number][]> {\n  const url =\n    \"https://api.openrouteservice.org/v2/directions/driving-car/geojson\";\n  const body = {\n    coordinates: [\n      [start[1], start[0]], // [lng, lat]\n      [end[1], end[0]],\n    ],\n  };\n  const res = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      Authorization: ORS_API_KEY,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  if (!res.ok) return [start, end];\n  const data = await res.json();\n  if (\n    data &&\n    data.features &&\n    data.features[0] &&\n    data.features[0].geometry &&\n    data.features[0].geometry.coordinates\n  ) {\n    // ORS returns [lng, lat], convert to [lat, lng]\n    return data.features[0].geometry.coordinates.map(\n      ([lng, lat]: [number, number]) => [lat, lng],\n    );\n  }\n  return [start, end];\n}\n\nfunction App() {\n  const [pins, setPins] = useState<Pin[]>(initialPins);\n  const [startIdx, setStartIdx] = useState<number | null>(null);\n  const [endIdx, setEndIdx] = useState<number | null>(null);\n\n  // Handle map click to add a new pin\n  const handleMapClick = (e: any) => {\n    if (!e.latlng) return;\n    const coords: [number, number] = [e.latlng.lat, e.latlng.lng];\n    const placeName = prompt(\"Enter the name of this place:\");\n    if (!placeName) return;\n    setPins((prev) => [...prev, { coords, placeName, media: [], travels: [] }]);\n  };\n\n  // Handle media upload for a pin\n  const handleMediaUpload = (pinIdx: number, files: FileList) => {\n    const fileObjs = Array.from(files).map((file) => ({\n      url: URL.createObjectURL(file),\n      type: file.type,\n      name: file.name,\n    }));\n    setPins((prev) =>\n      prev.map((pin, idx) =>\n        idx === pinIdx ? { ...pin, media: [...pin.media, ...fileObjs] } : pin,\n      ),\n    );\n  };\n\n  // Set a pin as start point\n  const handleSetStart = (idx: number) => {\n    setStartIdx(idx);\n    // If end is same as start, reset end\n    if (endIdx === idx) setEndIdx(null);\n  };\n\n  // Set a pin as end point\n  const handleSetEnd = async (idx: number) => {\n    setEndIdx(idx);\n    // If start is same as end, reset start\n    if (startIdx === idx) setStartIdx(null);\n\n    // If a start point is selected, add this end point to the travels of the start pin\n    if (startIdx !== null && startIdx !== idx) {\n      // Fetch the route from OpenRouteService\n      const route = await fetchORSRoute(\n        pins[startIdx].coords,\n        pins[idx].coords,\n      );\n\n      setPins((prevPins) =>\n        prevPins.map((pin, i) =>\n          i === startIdx\n            ? {\n                ...pin,\n                travels: pin.travels.some((t) => t.to === idx)\n                  ? pin.travels\n                  : [...pin.travels, { to: idx, route }],\n              }\n            : pin,\n        ),\n      );\n    }\n  };\n\n  return (\n    <div className=\"h-screen w-screen bg-gray-100\">\n      <MapView\n        pins={pins}\n        onMapClick={handleMapClick}\n        onMediaUpload={handleMediaUpload}\n        startIdx={startIdx}\n        endIdx={endIdx}\n        onSetStart={handleSetStart}\n        onSetEnd={handleSetEnd}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}